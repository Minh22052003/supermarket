// <auto-generated />
using System;
using APISuperMarket.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace APISuperMarket.Migrations
{
    [DbContext(typeof(DataSuperMartContext))]
    partial class DataSuperMartContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.32")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("APISuperMarket.Models.AccCustomer", b =>
                {
                    b.Property<int>("AccCustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Acc_CustomerID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccCustomerId"), 1L, 1);

                    b.Property<string>("AuthProvider")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("Auth_Provider");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<DateTime?>("DateCreation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("Date_Creation")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("HashPass")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("Hash_Pass");

                    b.Property<string>("ProviderId")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("ProviderID");

                    b.Property<int?>("StatusAccId")
                        .HasColumnType("int")
                        .HasColumnName("Status_AccID");

                    b.Property<string>("UserName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("User_Name");

                    b.HasKey("AccCustomerId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("StatusAccId");

                    b.ToTable("Acc_Customer", (string)null);
                });

            modelBuilder.Entity("APISuperMarket.Models.BankAccount", b =>
                {
                    b.Property<int>("BankAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Bank_AccountID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BankAccountId"), 1L, 1);

                    b.Property<string>("AccountHolderName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Account_Holder_Name");

                    b.Property<double?>("AccountNumber")
                        .HasColumnType("float")
                        .HasColumnName("Account_Number");

                    b.Property<string>("BankName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Bank_Name");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("Created_At")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("Updated_At")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("BankAccountId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Bank_Account", (string)null);
                });

            modelBuilder.Entity("APISuperMarket.Models.BankTransfer", b =>
                {
                    b.Property<int>("BankTransferId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Bank_TransferID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BankTransferId"), 1L, 1);

                    b.Property<string>("AccountName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("Account_Name");

                    b.Property<double?>("AccountNumber")
                        .HasColumnType("float")
                        .HasColumnName("Account_Number");

                    b.Property<double?>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("BankName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Bank_Name");

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("Create_At")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TransferDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("Transfer_Date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("UpdateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("Update_Time")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("BankTransferId");

                    b.HasIndex("OrderId");

                    b.ToTable("Bank_Transfers", (string)null);
                });

            modelBuilder.Entity("APISuperMarket.Models.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BrandID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BrandId"), 1L, 1);

                    b.Property<string>("BrandName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Brand_Name");

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("Create_At")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoBrandUrl")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Logo_Brand_Url");

                    b.Property<int?>("NumberOfProducts")
                        .HasColumnType("int")
                        .HasColumnName("Number_Of_Products");

                    b.Property<double?>("TotalStars")
                        .HasColumnType("float")
                        .HasColumnName("Total_Stars");

                    b.Property<DateTime?>("UpdateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("Update_At")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("BrandId");

                    b.ToTable("Brand", (string)null);
                });

            modelBuilder.Entity("APISuperMarket.Models.BrandChange", b =>
                {
                    b.Property<int>("BrandChangeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Brand_ChangeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BrandChangeId"), 1L, 1);

                    b.Property<int?>("BrandId")
                        .HasColumnType("int")
                        .HasColumnName("BrandID");

                    b.Property<DateTime?>("ChangeDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("Change_Date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ChangeDescription")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("Change_Description");

                    b.Property<int?>("ChangeTypeId")
                        .HasColumnType("int")
                        .HasColumnName("Change_TypeID");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.HasKey("BrandChangeId");

                    b.HasIndex("BrandId");

                    b.HasIndex("ChangeTypeId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Brand_Changes", (string)null);
                });

            modelBuilder.Entity("APISuperMarket.Models.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CartID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartId"), 1L, 1);

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.HasKey("CartId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Cart", (string)null);
                });

            modelBuilder.Entity("APISuperMarket.Models.CartProduct", b =>
                {
                    b.Property<int>("CartProductsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Cart_ProductsID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartProductsId"), 1L, 1);

                    b.Property<int?>("CartId")
                        .HasColumnType("int")
                        .HasColumnName("CartID");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("CartProductsId")
                        .HasName("PK__Cart_Pro__A080AFB0CFC975CE");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("Cart_Products", (string)null);
                });

            modelBuilder.Entity("APISuperMarket.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"), 1L, 1);

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Category_Name");

                    b.HasKey("CategoryId");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("APISuperMarket.Models.ChangeType", b =>
                {
                    b.Property<int>("ChangeTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Change_TypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChangeTypeId"), 1L, 1);

                    b.Property<string>("ChangeName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("Change_Name");

                    b.HasKey("ChangeTypeId");

                    b.ToTable("Change_Type", (string)null);
                });

            modelBuilder.Entity("APISuperMarket.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"), 1L, 1);

                    b.Property<DateTime?>("BirthDay")
                        .HasColumnType("datetime");

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Customer_Name");

                    b.Property<int?>("GenderId")
                        .HasColumnType("int")
                        .HasColumnName("GenderID");

                    b.Property<int?>("MailId")
                        .HasColumnType("int")
                        .HasColumnName("MailID");

                    b.Property<int?>("ProfileImageId")
                        .HasColumnType("int")
                        .HasColumnName("Profile_ImageID");

                    b.HasKey("CustomerId");

                    b.HasIndex("GenderId");

                    b.HasIndex("MailId");

                    b.HasIndex("ProfileImageId");

                    b.ToTable("Customer", (string)null);
                });

            modelBuilder.Entity("APISuperMarket.Models.CustomerRole", b =>
                {
                    b.Property<int>("CustomerRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Customer_RoleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerRoleId"), 1L, 1);

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.HasKey("CustomerRoleId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("RoleId");

                    b.ToTable("Customer_Roles", (string)null);
                });

            modelBuilder.Entity("APISuperMarket.Models.DiscountChange", b =>
                {
                    b.Property<int>("DiscountChangeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Discount_ChangeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiscountChangeId"), 1L, 1);

                    b.Property<DateTime?>("ChangeDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("Change_Date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ChangeDescription")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Change_Description");

                    b.Property<int?>("ChangeTypeId")
                        .HasColumnType("int")
                        .HasColumnName("Change_TypeID");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<int?>("DiscountCodeId")
                        .HasColumnType("int")
                        .HasColumnName("Discount_CodeID");

                    b.HasKey("DiscountChangeId");

                    b.HasIndex("ChangeTypeId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DiscountCodeId");

                    b.ToTable("Discount_Changes", (string)null);
                });

            modelBuilder.Entity("APISuperMarket.Models.DiscountCode", b =>
                {
                    b.Property<int>("DiscountCodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Discount_CodeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiscountCodeId"), 1L, 1);

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("Create_At")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("CurrentUsages")
                        .HasColumnType("int")
                        .HasColumnName("Current_Usages");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("DiscountAmount")
                        .HasColumnType("float")
                        .HasColumnName("Discount_Amount");

                    b.Property<int?>("DiscountPercentage")
                        .HasColumnType("int")
                        .HasColumnName("Discount_Percentage");

                    b.Property<int?>("MaxUsages")
                        .HasColumnType("int")
                        .HasColumnName("Max_Usages");

                    b.Property<double?>("MinimumOrderAmount")
                        .HasColumnType("float")
                        .HasColumnName("Minimum_Order_Amount");

                    b.Property<DateTime?>("UpdateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("Update_At")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("ValidFrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("Valid_From")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("ValidTo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("Valid_To")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("DiscountCodeId");

                    b.ToTable("Discount_Code", (string)null);
                });

            modelBuilder.Entity("APISuperMarket.Models.Gender", b =>
                {
                    b.Property<int>("GenderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("GenderID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenderId"), 1L, 1);

                    b.Property<string>("GenderName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Gender_Name");

                    b.HasKey("GenderId");

                    b.ToTable("Gender", (string)null);
                });

            modelBuilder.Entity("APISuperMarket.Models.Mail", b =>
                {
                    b.Property<int>("MailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MailID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MailId"), 1L, 1);

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("Email_Address");

                    b.HasKey("MailId");

                    b.ToTable("Mail");
                });

            modelBuilder.Entity("APISuperMarket.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"), 1L, 1);

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<double?>("DiscountAmount")
                        .HasColumnType("float")
                        .HasColumnName("Discount_Amount");

                    b.Property<int?>("DiscountCodeId")
                        .HasColumnType("int")
                        .HasColumnName("Discount_CodeID");

                    b.Property<DateTime?>("OrderDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("Order_Date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("OrderStatusId")
                        .HasColumnType("int")
                        .HasColumnName("Order_StatusID");

                    b.Property<double?>("TotalAmoint")
                        .HasColumnType("float")
                        .HasColumnName("Total_Amoint");

                    b.Property<DateTime?>("UpdateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("Update_Time")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DiscountCodeId");

                    b.HasIndex("OrderStatusId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("APISuperMarket.Models.OrderChange", b =>
                {
                    b.Property<int>("OrderChangeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Order_ChangeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderChangeId"), 1L, 1);

                    b.Property<DateTime?>("ChangeDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("Change_Date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ChangeDescription")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Change_Description");

                    b.Property<int?>("ChangeTypeId")
                        .HasColumnType("int")
                        .HasColumnName("Change_TypeID");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.HasKey("OrderChangeId");

                    b.HasIndex("ChangeTypeId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderId");

                    b.ToTable("Order_Changes", (string)null);
                });

            modelBuilder.Entity("APISuperMarket.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Order_DetailID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderDetailId"), 1L, 1);

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("Create_At")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Product_Name");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<double?>("TotalPrice")
                        .HasColumnType("float")
                        .HasColumnName("Total_Price");

                    b.Property<DateTime?>("UpdateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("Update_Time")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("Order_Details", (string)null);
                });

            modelBuilder.Entity("APISuperMarket.Models.OrderStatus", b =>
                {
                    b.Property<int>("OrderStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Order_StatusID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderStatusId"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Status_Name");

                    b.HasKey("OrderStatusId");

                    b.ToTable("Order_Status", (string)null);
                });

            modelBuilder.Entity("APISuperMarket.Models.Permission", b =>
                {
                    b.Property<int>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PermissionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PermissionId"), 1L, 1);

                    b.Property<string>("PermissionName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Permission_Name");

                    b.HasKey("PermissionId");

                    b.ToTable("Permission", (string)null);
                });

            modelBuilder.Entity("APISuperMarket.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"), 1L, 1);

                    b.Property<int?>("BrandId")
                        .HasColumnType("int")
                        .HasColumnName("BrandID");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Expiry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal?>("InventoryQuantity")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("Inventory_Quantity");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Product_Name");

                    b.HasKey("ProductId");

                    b.HasIndex("BrandId");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("APISuperMarket.Models.ProductCategory", b =>
                {
                    b.Property<int>("ProductCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Product_CategoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductCategoryId"), 1L, 1);

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.HasKey("ProductCategoryId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("Product_Category", (string)null);
                });

            modelBuilder.Entity("APISuperMarket.Models.ProductChange", b =>
                {
                    b.Property<int>("ProductChangeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Product_ChangeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductChangeId"), 1L, 1);

                    b.Property<DateTime?>("ChangeDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("Change_Date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ChangeDescription")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Change_Description");

                    b.Property<int?>("ChangeTypeId")
                        .HasColumnType("int")
                        .HasColumnName("Change_TypeID");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.HasKey("ProductChangeId");

                    b.HasIndex("ChangeTypeId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("Product_Changes", (string)null);
                });

            modelBuilder.Entity("APISuperMarket.Models.ProductImage", b =>
                {
                    b.Property<int>("ProductImagesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Product_ImagesID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductImagesId"), 1L, 1);

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("Image_Url");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.HasKey("ProductImagesId")
                        .HasName("PK__Product___46EC27B11133E25B");

                    b.HasIndex("ProductId");

                    b.ToTable("Product_Images", (string)null);
                });

            modelBuilder.Entity("APISuperMarket.Models.ProductReview", b =>
                {
                    b.Property<int>("ProductReviewsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Product_ReviewsID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductReviewsId"), 1L, 1);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("Create_At")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<double?>("Rating")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("Update_At")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("ProductReviewsId")
                        .HasName("PK__Product___F25AB493DEBFBDEE");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("Product_Reviews", (string)null);
                });

            modelBuilder.Entity("APISuperMarket.Models.ProfileImage", b =>
                {
                    b.Property<int>("ProfileImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Profile_ImageID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProfileImageId"), 1L, 1);

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("Image_URL");

                    b.HasKey("ProfileImageId");

                    b.ToTable("Profile_Image", (string)null);
                });

            modelBuilder.Entity("APISuperMarket.Models.ReviewImage", b =>
                {
                    b.Property<int>("ReviewImages")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Review_Images");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewImages"), 1L, 1);

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("Image_Url");

                    b.Property<int?>("ProductReviewsId")
                        .HasColumnType("int")
                        .HasColumnName("Product_ReviewsID");

                    b.HasKey("ReviewImages")
                        .HasName("PK__Review_I__3251BD3790172C85");

                    b.HasIndex("ProductReviewsId");

                    b.ToTable("Review_Images", (string)null);
                });

            modelBuilder.Entity("APISuperMarket.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"), 1L, 1);

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Role_Name");

                    b.HasKey("RoleId");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("APISuperMarket.Models.RolePermission", b =>
                {
                    b.Property<int?>("PermissionId")
                        .HasColumnType("int")
                        .HasColumnName("PermissionID");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("Role_Permissions", (string)null);
                });

            modelBuilder.Entity("APISuperMarket.Models.StatusAcc", b =>
                {
                    b.Property<int>("StatusAccId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Status_AccID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusAccId"), 1L, 1);

                    b.Property<string>("StatusAccName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Status_Acc_Name");

                    b.HasKey("StatusAccId");

                    b.ToTable("Status_Acc", (string)null);
                });

            modelBuilder.Entity("APISuperMarket.Models.StoreInfo", b =>
                {
                    b.Property<int>("StoreInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Store_InfoID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StoreInfoId"), 1L, 1);

                    b.Property<string>("AddressLine1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BannerUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Banner_URL");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Commune")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("Created_At")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("District")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hotline")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Logo_URL");

                    b.Property<string>("StoreName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Store_Name");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("Updated_At")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("StoreInfoId");

                    b.ToTable("Store_Info", (string)null);
                });

            modelBuilder.Entity("APISuperMarket.Models.UiChange", b =>
                {
                    b.Property<int>("UiChangeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UI_ChangeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UiChangeId"), 1L, 1);

                    b.Property<DateTime?>("ChangeDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("Change_Date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ChangeDescription")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Change_Description");

                    b.Property<int?>("ChangeTypeId")
                        .HasColumnType("int")
                        .HasColumnName("Change_TypeID");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<int?>("StoreInfoId")
                        .HasColumnType("int")
                        .HasColumnName("Store_InfoID");

                    b.HasKey("UiChangeId");

                    b.HasIndex("ChangeTypeId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("StoreInfoId");

                    b.ToTable("UI_Changes", (string)null);
                });

            modelBuilder.Entity("APISuperMarket.Models.UserChange", b =>
                {
                    b.Property<int>("UserChangeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("User_ChangeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserChangeId"), 1L, 1);

                    b.Property<int?>("AdminId")
                        .HasColumnType("int")
                        .HasColumnName("AdminID");

                    b.Property<DateTime?>("ChangeDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("Change_Date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ChangeDescription")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Change_Description");

                    b.Property<int?>("ChangeTypeId")
                        .HasColumnType("int")
                        .HasColumnName("Change_TypeID");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.HasKey("UserChangeId");

                    b.HasIndex("AdminId");

                    b.HasIndex("ChangeTypeId");

                    b.HasIndex("CustomerId");

                    b.ToTable("User_Changes", (string)null);
                });

            modelBuilder.Entity("APISuperMarket.Models.AccCustomer", b =>
                {
                    b.HasOne("APISuperMarket.Models.Customer", "Customer")
                        .WithMany("AccCustomers")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK__Acc_Custo__Statu__489AC854");

                    b.HasOne("APISuperMarket.Models.StatusAcc", "StatusAcc")
                        .WithMany("AccCustomers")
                        .HasForeignKey("StatusAccId")
                        .HasConstraintName("FK__Acc_Custo__Statu__498EEC8D");

                    b.Navigation("Customer");

                    b.Navigation("StatusAcc");
                });

            modelBuilder.Entity("APISuperMarket.Models.BankAccount", b =>
                {
                    b.HasOne("APISuperMarket.Models.Customer", "Customer")
                        .WithMany("BankAccounts")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK__Bank_Acco__Custo__08B54D69");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("APISuperMarket.Models.BankTransfer", b =>
                {
                    b.HasOne("APISuperMarket.Models.Order", "Order")
                        .WithMany("BankTransfers")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK__Bank_Tran__Order__662B2B3B");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("APISuperMarket.Models.BrandChange", b =>
                {
                    b.HasOne("APISuperMarket.Models.Brand", "Brand")
                        .WithMany("BrandChanges")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("FK__Brand_Cha__Brand__14E61A24");

                    b.HasOne("APISuperMarket.Models.ChangeType", "ChangeType")
                        .WithMany("BrandChanges")
                        .HasForeignKey("ChangeTypeId")
                        .HasConstraintName("FK__Brand_Cha__Chang__16CE6296");

                    b.HasOne("APISuperMarket.Models.Customer", "Customer")
                        .WithMany("BrandChanges")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK__Brand_Cha__Custo__15DA3E5D");

                    b.Navigation("Brand");

                    b.Navigation("ChangeType");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("APISuperMarket.Models.Cart", b =>
                {
                    b.HasOne("APISuperMarket.Models.Customer", "Customer")
                        .WithMany("Carts")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK__Cart__CustomerID__160F4887");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("APISuperMarket.Models.CartProduct", b =>
                {
                    b.HasOne("APISuperMarket.Models.Cart", "Cart")
                        .WithMany("CartProducts")
                        .HasForeignKey("CartId")
                        .HasConstraintName("FK__Cart_Prod__CartI__18EBB532");

                    b.HasOne("APISuperMarket.Models.Product", "Product")
                        .WithMany("CartProducts")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK__Cart_Prod__Produ__17F790F9");

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("APISuperMarket.Models.Customer", b =>
                {
                    b.HasOne("APISuperMarket.Models.Gender", "Gender")
                        .WithMany("Customers")
                        .HasForeignKey("GenderId")
                        .HasConstraintName("FK__Customer__Gender__66603565");

                    b.HasOne("APISuperMarket.Models.Mail", "Mail")
                        .WithMany("Customers")
                        .HasForeignKey("MailId")
                        .HasConstraintName("FK__Customer__MailID__6754599E");

                    b.HasOne("APISuperMarket.Models.ProfileImage", "ProfileImage")
                        .WithMany("Customers")
                        .HasForeignKey("ProfileImageId")
                        .HasConstraintName("FK__Customer__Profil__68487DD7");

                    b.Navigation("Gender");

                    b.Navigation("Mail");

                    b.Navigation("ProfileImage");
                });

            modelBuilder.Entity("APISuperMarket.Models.CustomerRole", b =>
                {
                    b.HasOne("APISuperMarket.Models.Customer", "Customer")
                        .WithMany("CustomerRoles")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK__Customer___Custo__3E1D39E1");

                    b.HasOne("APISuperMarket.Models.Role", "Role")
                        .WithMany("CustomerRoles")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK__Customer___RoleI__3D2915A8");

                    b.Navigation("Customer");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("APISuperMarket.Models.DiscountChange", b =>
                {
                    b.HasOne("APISuperMarket.Models.ChangeType", "ChangeType")
                        .WithMany("DiscountChanges")
                        .HasForeignKey("ChangeTypeId")
                        .HasConstraintName("FK__Discount___Chang__05A3D694");

                    b.HasOne("APISuperMarket.Models.Customer", "Customer")
                        .WithMany("DiscountChanges")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK__Discount___Custo__04AFB25B");

                    b.HasOne("APISuperMarket.Models.DiscountCode", "DiscountCode")
                        .WithMany("DiscountChanges")
                        .HasForeignKey("DiscountCodeId")
                        .HasConstraintName("FK__Discount___Disco__03BB8E22");

                    b.Navigation("ChangeType");

                    b.Navigation("Customer");

                    b.Navigation("DiscountCode");
                });

            modelBuilder.Entity("APISuperMarket.Models.Order", b =>
                {
                    b.HasOne("APISuperMarket.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK__Orders__Customer__58D1301D");

                    b.HasOne("APISuperMarket.Models.DiscountCode", "DiscountCode")
                        .WithMany("Orders")
                        .HasForeignKey("DiscountCodeId")
                        .HasConstraintName("FK__Orders__Discount__5AB9788F");

                    b.HasOne("APISuperMarket.Models.OrderStatus", "OrderStatus")
                        .WithMany("Orders")
                        .HasForeignKey("OrderStatusId")
                        .HasConstraintName("FK__Orders__Order_St__59C55456");

                    b.Navigation("Customer");

                    b.Navigation("DiscountCode");

                    b.Navigation("OrderStatus");
                });

            modelBuilder.Entity("APISuperMarket.Models.OrderChange", b =>
                {
                    b.HasOne("APISuperMarket.Models.ChangeType", "ChangeType")
                        .WithMany("OrderChanges")
                        .HasForeignKey("ChangeTypeId")
                        .HasConstraintName("FK__Order_Cha__Chang__0B5CAFEA");

                    b.HasOne("APISuperMarket.Models.Customer", "Customer")
                        .WithMany("OrderChanges")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK__Order_Cha__Custo__0A688BB1");

                    b.HasOne("APISuperMarket.Models.Order", "Order")
                        .WithMany("OrderChanges")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK__Order_Cha__Order__09746778");

                    b.Navigation("ChangeType");

                    b.Navigation("Customer");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("APISuperMarket.Models.OrderDetail", b =>
                {
                    b.HasOne("APISuperMarket.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK__Order_Det__Order__5F7E2DAC");

                    b.HasOne("APISuperMarket.Models.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK__Order_Det__Produ__607251E5");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("APISuperMarket.Models.Product", b =>
                {
                    b.HasOne("APISuperMarket.Models.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("FK__Product__BrandID__7A672E12");

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("APISuperMarket.Models.ProductCategory", b =>
                {
                    b.HasOne("APISuperMarket.Models.Category", "Category")
                        .WithMany("ProductCategories")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK__Product_C__Categ__32AB8735");

                    b.HasOne("APISuperMarket.Models.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK__Product_C__Produ__31B762FC");

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("APISuperMarket.Models.ProductChange", b =>
                {
                    b.HasOne("APISuperMarket.Models.ChangeType", "ChangeType")
                        .WithMany("ProductChanges")
                        .HasForeignKey("ChangeTypeId")
                        .HasConstraintName("FK__Product_C__Chang__7FEAFD3E");

                    b.HasOne("APISuperMarket.Models.Customer", "Customer")
                        .WithMany("ProductChanges")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK__Product_C__Custo__7EF6D905");

                    b.HasOne("APISuperMarket.Models.Product", "Product")
                        .WithMany("ProductChanges")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK__Product_C__Produ__7E02B4CC");

                    b.Navigation("ChangeType");

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("APISuperMarket.Models.ProductImage", b =>
                {
                    b.HasOne("APISuperMarket.Models.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK__Product_I__Produ__3587F3E0");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("APISuperMarket.Models.ProductReview", b =>
                {
                    b.HasOne("APISuperMarket.Models.Customer", "Customer")
                        .WithMany("ProductReviews")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK__Product_R__Custo__1EA48E88");

                    b.HasOne("APISuperMarket.Models.Product", "Product")
                        .WithMany("ProductReviews")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK__Product_R__Produ__1DB06A4F");

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("APISuperMarket.Models.ReviewImage", b =>
                {
                    b.HasOne("APISuperMarket.Models.ProductReview", "ProductReviews")
                        .WithMany("ReviewImages")
                        .HasForeignKey("ProductReviewsId")
                        .HasConstraintName("FK__Review_Im__Produ__2180FB33");

                    b.Navigation("ProductReviews");
                });

            modelBuilder.Entity("APISuperMarket.Models.RolePermission", b =>
                {
                    b.HasOne("APISuperMarket.Models.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .HasConstraintName("FK__Role_Perm__Permi__41EDCAC5");

                    b.HasOne("APISuperMarket.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK__Role_Perm__RoleI__42E1EEFE");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("APISuperMarket.Models.UiChange", b =>
                {
                    b.HasOne("APISuperMarket.Models.ChangeType", "ChangeType")
                        .WithMany("UiChanges")
                        .HasForeignKey("ChangeTypeId")
                        .HasConstraintName("FK__UI_Change__Chang__7A3223E8");

                    b.HasOne("APISuperMarket.Models.Customer", "Customer")
                        .WithMany("UiChanges")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK__UI_Change__Custo__793DFFAF");

                    b.HasOne("APISuperMarket.Models.StoreInfo", "StoreInfo")
                        .WithMany("UiChanges")
                        .HasForeignKey("StoreInfoId")
                        .HasConstraintName("FK__UI_Change__Store__7849DB76");

                    b.Navigation("ChangeType");

                    b.Navigation("Customer");

                    b.Navigation("StoreInfo");
                });

            modelBuilder.Entity("APISuperMarket.Models.UserChange", b =>
                {
                    b.HasOne("APISuperMarket.Models.Customer", "Admin")
                        .WithMany("UserChangeAdmins")
                        .HasForeignKey("AdminId")
                        .HasConstraintName("FK__User_Chan__Admin__0F2D40CE");

                    b.HasOne("APISuperMarket.Models.ChangeType", "ChangeType")
                        .WithMany("UserChanges")
                        .HasForeignKey("ChangeTypeId")
                        .HasConstraintName("FK__User_Chan__Chang__11158940");

                    b.HasOne("APISuperMarket.Models.Customer", "Customer")
                        .WithMany("UserChangeCustomers")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK__User_Chan__Custo__10216507");

                    b.Navigation("Admin");

                    b.Navigation("ChangeType");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("APISuperMarket.Models.Brand", b =>
                {
                    b.Navigation("BrandChanges");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("APISuperMarket.Models.Cart", b =>
                {
                    b.Navigation("CartProducts");
                });

            modelBuilder.Entity("APISuperMarket.Models.Category", b =>
                {
                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("APISuperMarket.Models.ChangeType", b =>
                {
                    b.Navigation("BrandChanges");

                    b.Navigation("DiscountChanges");

                    b.Navigation("OrderChanges");

                    b.Navigation("ProductChanges");

                    b.Navigation("UiChanges");

                    b.Navigation("UserChanges");
                });

            modelBuilder.Entity("APISuperMarket.Models.Customer", b =>
                {
                    b.Navigation("AccCustomers");

                    b.Navigation("BankAccounts");

                    b.Navigation("BrandChanges");

                    b.Navigation("Carts");

                    b.Navigation("CustomerRoles");

                    b.Navigation("DiscountChanges");

                    b.Navigation("OrderChanges");

                    b.Navigation("Orders");

                    b.Navigation("ProductChanges");

                    b.Navigation("ProductReviews");

                    b.Navigation("UiChanges");

                    b.Navigation("UserChangeAdmins");

                    b.Navigation("UserChangeCustomers");
                });

            modelBuilder.Entity("APISuperMarket.Models.DiscountCode", b =>
                {
                    b.Navigation("DiscountChanges");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("APISuperMarket.Models.Gender", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("APISuperMarket.Models.Mail", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("APISuperMarket.Models.Order", b =>
                {
                    b.Navigation("BankTransfers");

                    b.Navigation("OrderChanges");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("APISuperMarket.Models.OrderStatus", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("APISuperMarket.Models.Product", b =>
                {
                    b.Navigation("CartProducts");

                    b.Navigation("OrderDetails");

                    b.Navigation("ProductCategories");

                    b.Navigation("ProductChanges");

                    b.Navigation("ProductImages");

                    b.Navigation("ProductReviews");
                });

            modelBuilder.Entity("APISuperMarket.Models.ProductReview", b =>
                {
                    b.Navigation("ReviewImages");
                });

            modelBuilder.Entity("APISuperMarket.Models.ProfileImage", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("APISuperMarket.Models.Role", b =>
                {
                    b.Navigation("CustomerRoles");
                });

            modelBuilder.Entity("APISuperMarket.Models.StatusAcc", b =>
                {
                    b.Navigation("AccCustomers");
                });

            modelBuilder.Entity("APISuperMarket.Models.StoreInfo", b =>
                {
                    b.Navigation("UiChanges");
                });
#pragma warning restore 612, 618
        }
    }
}
